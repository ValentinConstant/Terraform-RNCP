name: Terraform CI/CD

on:
  push:
    branches:
      - eks-2
  pull_request:
    branches:
      - eks-2

jobs:
  terraform:
    name: 'Terraform Plan and Apply'
    runs-on: ubuntu-latest

    env:
      AWS_REGION: eu-west-3
      CLUSTER_NAME: kbnhvn-cluster
      JENKINS_ADMIN_PASSWORD: ${{ secrets.JENKINS_ADMIN_PASSWORD }}
      CLOUDNS_API_URL: "https://api.cloudns.net/dns"
      CLOUDNS_AUTH_ID: ${{ secrets.CLOUDNS_AUTH_ID }}
      CLOUDNS_AUTH_PASSWORD: ${{ secrets.CLOUDNS_AUTH_PASSWORD }}
      DOMAIN_NAME: "kbnhvn-project.eu"
      SUBDOMAIN: "jenkins"

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/eks-2' && github.event_name == 'push'
        run: terraform apply -input=false -auto-approve tfplan

      - name: Get Terraform Outputs
        id: tf_outputs
        run: |
          echo "CLUSTER_NAME=$(terraform output -raw cluster_name)" >> $GITHUB_ENV

      - name: Install kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'v1.21.0'

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

      - name: Install Traefik and CRDS
        run: |
          helm repo add traefik https://helm.traefik.io/traefik
          helm repo update
          helm upgrade --install traefik  --namespace traefik --create-namespace --set dashboard.enabled=true traefik/traefik
          kubectl apply -f https://raw.githubusercontent.com/traefik/traefik/v2.8/docs/content/reference/dynamic-configuration/kubernetes-crd-definition-v1.yml
          kubectl apply -f https://raw.githubusercontent.com/traefik/traefik/v2.8/docs/content/reference/dynamic-configuration/kubernetes-crd-rbac.yml

      - name: Deploy Jenkins
        run: |
          if kubectl get namespace jenkins > /dev/null 2>&1; then
            echo "Namespace jenkins already exists."
          else
            # Create the namespace
            kubectl create namespace jenkins
            echo "Namespace jenkins created."
          fi

          kubectl apply -f k8s-configs/jenkins/serviceAccount.yaml
          kubectl apply -f k8s-configs/jenkins/volume.yaml
          kubectl apply -f k8s-configs/jenkins/deployment.yaml
          kubectl apply -f k8s-configs/jenkins/service.yaml
          kubectl apply -f k8s-configs/jenkins/ingress.yaml

      - name: Get Load Balancer DNS name
        run: |
          DNS_NAME=$(kubectl get svc traefik --namespace traefik -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "DNS_NAME=${DNS_NAME}" >> $GITHUB_ENV

      - name: Update ClouDNS A Record
        run: |
          curl -X POST "${{ env.CLOUDNS_API_URL }}/add-record.json" \
            -d "auth-id=${{ env.CLOUDNS_AUTH_ID }}" \
            -d "auth-password=${{ env.CLOUDNS_AUTH_PASSWORD }}" \
            -d "domain-name=${{ env.DOMAIN_NAME }}" \
            -d "record-type=CNAME" \
            -d "host=${{ env.SUBDOMAIN }}" \
            -d "record=${{ env.DNS_NAME }}" \
            -d "ttl=60"

      - name: Display Jenkins initial password
        run: |
          POD_NAME=$(kubectl get pods --namespace=jenkins -o jsonpath="{.items[*].metadata.name}" | tr ' ' '\n' | grep 'jenkins-deployment-')
          kubectl logs "$POD_NAME" --namespace=jenkins | tail -n 1

      - name: Generate Kubeconfig for Jenkins
        run: |
          TOKEN=$(kubectl -n default get secret $(kubectl -n default get sa/jenkins -o jsonpath="{.secrets[0].name}") -o jsonpath="{.data.token}" | base64 --decode)
          CLUSTER_NAME=$(kubectl config view --minify -o jsonpath='{.clusters[0].name}')
          CLUSTER_ENDPOINT=$(kubectl config view --minify -o jsonpath='{.clusters[0].cluster.server}')
          CLUSTER_CA=$(kubectl config view --minify -o jsonpath='{.clusters[0].cluster.certificate-authority-data}')
          cat <<EOF > kubeconfig-jenkins
          apiVersion: v1
          kind: Config
          clusters:
          - cluster:
              certificate-authority-data: ${CLUSTER_CA}
              server: ${CLUSTER_ENDPOINT}
            name: ${CLUSTER_NAME}
          contexts:
          - context:
              cluster: ${CLUSTER_NAME}
              user: jenkins
            name: jenkins-context
          current-context: jenkins-context
          users:
          - name: jenkins
            user:
              token: ${TOKEN}
          EOF

      - name: Upload Kubeconfig to Jenkins
        uses: actions/upload-artifact@v2
        with:
          name: kubeconfig-jenkins
          path: kubeconfig-jenkins
