name: Terraform CI/CD

on:
  push:
    branches:
      - eks-2
  pull_request:
    branches:
      - eks-2

jobs:
  terraform:
    name: 'Terraform Plan and Apply'
    runs-on: ubuntu-latest

    env:
      AWS_REGION: eu-west-3
      CLUSTER_NAME: kbnhvn-cluster
      JENKINS_ADMIN_PASSWORD: ${{ secrets.JENKINS_ADMIN_PASSWORD }}
      CLOUDNS_API_URL: "https://api.cloudns.net/dns"
      CLOUDNS_AUTH_ID: ${{ secrets.CLOUDNS_AUTH_ID }}
      CLOUDNS_AUTH_PASSWORD: ${{ secrets.CLOUDNS_AUTH_PASSWORD }}
      DOMAIN_NAME: "kbnhvn-project.eu"
      JENKINS_SUBDOMAIN: "jenkins"
      APP_SUBDOMAIN: "app"

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/eks-2' && github.event_name == 'push'
        run: terraform apply -input=false -auto-approve tfplan

      - name: Get Terraform Outputs
        id: tf_outputs
        run: |
          echo "CLUSTER_NAME=$(terraform output -raw cluster_name)" >> $GITHUB_ENV
          echo "FILE_SYSTEM_ID=$(terraform output -raw efs_storage)" >> $GITHUB_ENV
          echo "ACCESS_POINT_ID=$(terraform output -raw efs_storage_access_point)" >> $GITHUB_ENV
          echo "MOUNT_TARGET=$(terraform output -raw efs_mount_target_dns)" >> $GITHUB_ENV

      - name: Install kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'v1.21.0'

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

      - name: Install Traefik and CRDS
        run: |
          helm repo add traefik https://helm.traefik.io/traefik
          helm repo update
          helm upgrade --install traefik  --namespace traefik --create-namespace -f k8s-configs/traefik/values.yaml --set dashboard.enabled=true traefik/traefik
          kubectl apply -f https://raw.githubusercontent.com/traefik/traefik/v2.8/docs/content/reference/dynamic-configuration/kubernetes-crd-definition-v1.yml
          kubectl apply -f https://raw.githubusercontent.com/traefik/traefik/v2.8/docs/content/reference/dynamic-configuration/kubernetes-crd-rbac.yml

      - name: Create EFS for PersistentVolumes
        run: |
          helm repo add aws-efs-csi-driver https://kubernetes-sigs.github.io/aws-efs-csi-driver/
          helm repo update
          helm upgrade --install aws-efs-csi-driver aws-efs-csi-driver/aws-efs-csi-driver --namespace kube-system

          sed -i "s/<DATA>/${{ env.FILE_SYSTEM_ID }}/g" k8s-configs/storage/storageClass.yaml
          kubectl apply -f k8s-configs/storage/storageClass.yaml

          sed -i "s/<DATA>/${{ env.FILE_SYSTEM_ID }}::${{ env.ACCESS_POINT_ID }}/g" k8s-configs/storage/pv.yaml
          sed -i "s/<DNS>/${{ env.MOUNT_TARGET }}/g" k8s-configs/storage/pv.yaml
          kubectl apply -f k8s-configs/storage/pv.yaml

      - name: Deploy grafana
        run: |
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo update
          helm upgrade --install grafana grafana/grafana --namespace monitoring --create-namespace -f k8s-configs/grafana/values.yaml
          
      - name: Deploy Prometheus
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          kubectl apply -f k8s-configs/prometheus/volume.yaml
          helm upgrade --install prometheus prometheus-community/prometheus --namespace monitoring --create-namespace -f k8s-configs/prometheus/values.yaml

      - name: Get Load Balancer DNS name
        run: |
          DNS_NAME=$(kubectl get svc traefik --namespace traefik -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "DNS_NAME=${DNS_NAME}" >> $GITHUB_ENV

      - name: Update ClouDNS CNAME for App
        run: |
          curl -X POST "${{ env.CLOUDNS_API_URL }}/add-record.json" \
            -d "auth-id=${{ env.CLOUDNS_AUTH_ID }}" \
            -d "auth-password=${{ env.CLOUDNS_AUTH_PASSWORD }}" \
            -d "domain-name=${{ env.DOMAIN_NAME }}" \
            -d "record-type=CNAME" \
            -d "host=${{ env.APP_SUBDOMAIN }}" \
            -d "record=${{ env.DNS_NAME }}" \
            -d "ttl=60"

      - name: Update ClouDNS CNAME for Grafana
        run: |
          curl -X POST "${{ env.CLOUDNS_API_URL }}/add-record.json" \
            -d "auth-id=${{ env.CLOUDNS_AUTH_ID }}" \
            -d "auth-password=${{ env.CLOUDNS_AUTH_PASSWORD }}" \
            -d "domain-name=${{ env.DOMAIN_NAME }}" \
            -d "record-type=CNAME" \
            -d "host=grafana" \
            -d "record=${{ env.DNS_NAME }}" \
            -d "ttl=60"

      - name: Update ClouDNS CNAME for Prometheus
        run: |
          curl -X POST "${{ env.CLOUDNS_API_URL }}/add-record.json" \
            -d "auth-id=${{ env.CLOUDNS_AUTH_ID }}" \
            -d "auth-password=${{ env.CLOUDNS_AUTH_PASSWORD }}" \
            -d "domain-name=${{ env.DOMAIN_NAME }}" \
            -d "record-type=CNAME" \
            -d "host=prometheus" \
            -d "record=${{ env.DNS_NAME }}" \
            -d "ttl=60"            

