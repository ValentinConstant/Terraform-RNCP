name: Terraform CI/CD

on:
  push:
    branches:
      - EKS
  pull_request:
    branches:
      - EKS

jobs:
  terraform:
    name: 'Terraform Plan and Apply'
    runs-on: ubuntu-latest

    env:
      AWS_REGION: eu-west-3
      CLUSTER_NAME: kbnhvn-cluster
      JENKINS_ADMIN_PASSWORD: ${{ secrets.JENKINS_ADMIN_PASSWORD }}
      CLOUDNS_API_URL: "https://api.cloudns.net/dns"
      CLOUDNS_AUTH_ID: ${{ secrets.CLOUDNS_AUTH_ID }}
      CLOUDNS_AUTH_PASSWORD: ${{ secrets.CLOUDNS_AUTH_PASSWORD }}
      DOMAIN_NAME: "kbnhvn-project.eu"
      SUBDOMAIN: "jenkins"

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/eks' && github.event_name == 'push'
        run: terraform apply -input=false -auto-approve tfplan

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Get Terraform Outputs
        id: tf_outputs
        run: |
          PUBLIC_SUBNETS=$(terraform output -json public_subnets | jq -r '.[]' | paste -sd "," - | sed 's/,/\\,/g')
          echo "Extracted and Escaped PUBLIC_SUBNETS=${PUBLIC_SUBNETS}"
          echo "PUBLIC_SUBNETS=${PUBLIC_SUBNETS}" >> $GITHUB_ENV
          echo "IAM_ROLE_ARN=$(terraform output -raw traefik_role_arn)" >> $GITHUB_ENV
          echo "SSL_CERT_ARN=$(terraform output -raw ssl_cert_arn)" >> $GITHUB_ENV

      - name: Install kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'v1.21.0'

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

      - name: Deploy Traefik Ingress Controller with CRDs
        run: |
          helm repo add traefik https://helm.traefik.io/traefik
          helm repo update
          helm install traefik traefik/traefik --namespace kube-system \
            --set service.type=LoadBalancer \
            --set crds.enabled=true \
            --set deployment.podAnnotations."iam\.amazonaws\.com/role"=${{ env.IAM_ROLE_ARN }} \
            --set service.annotations."service\.beta\.kubernetes\.io/aws-load-balancer-type"="alb" \
            --set service.annotations."service\.beta\.kubernetes\.io/aws-load-balancer-subnets"="subnet-0a1b284c3e1d38a8d\,subnet-08f2a223616795f49\,subnet-00b6b9183d64dae1d" \
            --set service.annotations."service\.beta\.kubernetes\.io/aws-load-balancer-backend-protocol"="HTTP" \
            --set service.annotations."service\.beta\.kubernetes\.io/aws-load-balancer-ssl-cert"=${{ env.SSL_CERT_ARN }} \
            --set service.annotations."service\.beta\.kubernetes\.io/aws-load-balancer-ssl-ports"="https" \
            --set service.annotations."service\.beta\.kubernetes\.io/aws-load-balancer-connection-idle-timeout"="3600"

      - name: Deploy Jenkins via Helm
        run: |
          helm repo add jenkins https://charts.jenkins.io
          helm repo update
          helm upgrade --install jenkins jenkins/jenkins \
            --set controller.adminPassword=${{ env.JENKINS_ADMIN_PASSWORD }} \
            --set persistence.enabled=true \
            --set persistence.storageClass=gp2 \
            --set persistence.size=10Gi \
            --set controller.serviceType=LoadBalancer

      - name: Apply Jenkins Middleware
        run: |
          kubectl apply -f k8s-configs/secure-headers.yaml

      - name: Apply Jenkins IngressRoute
        run: |
          kubectl apply -f k8s-configs/jenkins-ingressroute.yaml

      - name: Apply Jenkins Agent ConfigMap
        run: |
          kubectl apply -f k8s-configs/jenkins-agent-config.yaml

      - name: Get Jenkins Ingress IP
        id: get_jenkins_ip
        run: |
          export SERVICE_IP=$(kubectl get svc traefik --namespace kube-system -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo "JENKINS_URL=http://$SERVICE_IP" >> $GITHUB_ENV

      - name: Update ClouDNS A Record
        run: |
          curl -X POST "${{ env.CLOUDNS_API_URL }}/add-record.json" \
            -d "auth-id=${{ env.CLOUDNS_AUTH_ID }}" \
            -d "auth-password=${{ env.CLOUDNS_AUTH_PASSWORD }}" \
            -d "domain-name=${{ env.DOMAIN_NAME }}" \
            -d "record-type=A" \
            -d "host=${{ env.SUBDOMAIN }}" \
            -d "record=${{ env.SERVICE_IP }}" \
            -d "ttl=60"

      - name: Output Jenkins URL
        run: echo "Jenkins is available at http://${{ env.SUBDOMAIN }}.${{ env.DOMAIN_NAME }}"

      - name: Apply Jenkins RBAC
        run: |
          kubectl apply -f k8s-configs/jenkins-rbac.yaml

      - name: Generate Kubeconfig for Jenkins
        run: |
          TOKEN=$(kubectl -n default get secret $(kubectl -n default get sa/jenkins -o jsonpath="{.secrets[0].name}") -o jsonpath="{.data.token}" | base64 --decode)
          CLUSTER_NAME=$(kubectl config view --minify -o jsonpath='{.clusters[0].name}')
          CLUSTER_ENDPOINT=$(kubectl config view --minify -o jsonpath='{.clusters[0].cluster.server}')
          CLUSTER_CA=$(kubectl config view --minify -o jsonpath='{.clusters[0].cluster.certificate-authority-data}')
          cat <<EOF > kubeconfig-jenkins
          apiVersion: v1
          kind: Config
          clusters:
          - cluster:
              certificate-authority-data: ${CLUSTER_CA}
              server: ${CLUSTER_ENDPOINT}
            name: ${CLUSTER_NAME}
          contexts:
          - context:
              cluster: ${CLUSTER_NAME}
              user: jenkins
            name: jenkins-context
          current-context: jenkins-context
          users:
          - name: jenkins
            user:
              token: ${TOKEN}
          EOF

      - name: Upload Kubeconfig to Jenkins
        uses: actions/upload-artifact@v2
        with:
          name: kubeconfig-jenkins
          path: kubeconfig-jenkins
