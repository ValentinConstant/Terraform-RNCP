name: Terraform CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  terraform:
    name: 'Terraform Plan and Apply'
    runs-on: ubuntu-latest

    env:
      AWS_REGION: eu-west-3
      CLUSTER_NAME: kbnhvn-cluster

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -input=false -auto-approve tfplan

      - name: Get Terraform Outputs
        id: tf_outputs
        run: |
          echo "CLUSTER_NAME=$(terraform output -raw cluster_name)" >> $GITHUB_ENV
          echo "FILE_SYSTEM_ID=$(terraform output -raw efs_storage)" >> $GITHUB_ENV
          echo "ACCESS_POINT_ID=$(terraform output -raw efs_storage_access_point)" >> $GITHUB_ENV
          echo "MOUNT_TARGET=$(terraform output -raw efs_mount_target_dns)" >> $GITHUB_ENV

      - name: Install kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'v1.21.0'

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

      - name: Create EFS PersistentVolumes
        run: |

          helm repo add aws-efs-csi-driver https://kubernetes-sigs.github.io/aws-efs-csi-driver/
          helm repo update
          helm upgrade --install aws-efs-csi-driver aws-efs-csi-driver/aws-efs-csi-driver --namespace kube-system

          # Create StorageClass
          sed -i "s/<DATA>/${{ env.FILE_SYSTEM_ID }}/g" k8s-configs/storage/storageClass.yaml
          kubectl apply -f k8s-configs/storage/storageClass.yaml

          # Create PersistentVolume for postgres
          sed -i "s/<DATA>/${{ env.FILE_SYSTEM_ID }}::${{ env.ACCESS_POINT_ID }}/g" k8s-configs/storage/pv-db.yaml
          sed -i "s/<DNS>/${{ env.MOUNT_TARGET }}/g" k8s-configs/storage/pv-db.yaml
          kubectl apply -f k8s-configs/storage/pv-db.yaml

          # Create PersistentVolume for Elasticsearch
          sed -i "s/<DATA>/${{ env.FILE_SYSTEM_ID }}::${{ env.ACCESS_POINT_ID }}/g" k8s-configs/storage/pv-es.yaml
          sed -i "s/<DNS>/${{ env.MOUNT_TARGET }}/g" k8s-configs/storage/pv-es.yaml
          kubectl apply -f k8s-configs/storage/pv-es.yaml

          # Create PersistentVolume for postgres DEV
          sed -i "s/<DATA>/${{ env.FILE_SYSTEM_ID }}::${{ env.ACCESS_POINT_ID }}/g" k8s-configs/storage/pv-db-dev.yaml
          sed -i "s/<DNS>/${{ env.MOUNT_TARGET }}/g" k8s-configs/storage/pv-db-dev.yaml
          kubectl apply -f k8s-configs/storage/pv-db-dev.yaml

          # Create PersistentVolume for Elasticsearch DEV
          sed -i "s/<DATA>/${{ env.FILE_SYSTEM_ID }}::${{ env.ACCESS_POINT_ID }}/g" k8s-configs/storage/pv-es-dev.yaml
          sed -i "s/<DNS>/${{ env.MOUNT_TARGET }}/g" k8s-configs/storage/pv-es-dev.yaml
          kubectl apply -f k8s-configs/storage/pv-es-dev.yaml

          # Create PersistentVolume for Prometheus
          sed -i "s/<DATA>/${{ env.FILE_SYSTEM_ID }}::${{ env.ACCESS_POINT_ID }}/g" k8s-configs/storage/pv-prom.yaml
          sed -i "s/<DNS>/${{ env.MOUNT_TARGET }}/g" k8s-configs/storage/pv-prom.yaml
          kubectl apply -f k8s-configs/storage/pv-prom.yaml

          # Create PersistentVolume for Grafana
          sed -i "s/<DATA>/${{ env.FILE_SYSTEM_ID }}::${{ env.ACCESS_POINT_ID }}/g" k8s-configs/storage/pv-grafana.yaml
          sed -i "s/<DNS>/${{ env.MOUNT_TARGET }}/g" k8s-configs/storage/pv-grafana.yaml
          kubectl apply -f k8s-configs/storage/pv-grafana.yaml
